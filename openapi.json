{
  "openapi": "3.1.0",
  "info": {
    "title": "SPCTER-GLOBAL PG API - Public Documentation",
    "description": "## üöÄ spcter-gloabl Payment Gateway API\n\n**Base URL:** `https://pg.api.spcter-global.click`\n\n### üîê Authentication\n- **Header:** `Authorization-Key`\n- **Value:** Your API key (contact support for access)\n\n### üìû Support\n- **Email:** spcter.cs@gmail.com\n\n### üåü Features\n- Real-time cryptocurrency payments\n- Multi-currency support\n- Secure wallet management\n- Transaction monitoring\n- QR code generation",
    "version": "1.0.0",
    "contact": {
      "name": "spcter-global Support",
      "email": "spcter.cs@gmail.com"
    },
    "license": {
      "name": "Commercial License"
    }
  },
  "servers": [
    {
      "url": "https://pg.api.spcter-global.click", 
      "description": "Demo API Server"
    }
  ],
  "tags": [
    {
      "name": "payment",
      "description": "üí≥ Payment processing endpoints"
    },
    {
      "name": "qrcode", 
      "description": "üì± QR code generation and management"
    },
    {
      "name": "market",
      "description": "üìä Market data and exchange rates"
    },
    {
      "name": "transaction",
      "description": "üîÑ Transaction history and status"
    }
  ],
  "paths": {
    "/qrcode/generate": {
      "post": {
        "tags": ["qrcode"],
        "summary": "Generate QR Code",
        "description": "Generate a QR code for payment processing\n\n### Example Use Case\nCreate a QR code that customers can scan to initiate a payment.\n\n### Rate Limiting\n- 100 requests per minute per API key",
        "operationId": "generate_qr_code",
        "security": [{"APIKeyHeader": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["shopid", "userid"],
                "properties": {
                  "shopid": {
                    "type": "string",
                    "description": "Unique shop identifier",
                    "example": "shop_123456"
                  },
                  "userid": {
                    "type": "string", 
                    "description": "Customer user identifier",
                    "example": "user_789012"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "‚úÖ QR code generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "qr_code_url_buy": {
                      "type": "string",
                      "description": "QR code URL for buy transactions",
                      "example": "https://api.otcbay.com/qr/buy/abc123"
                    },
                    "qr_code_url_sell": {
                      "type": "string",
                      "description": "QR code URL for sell transactions", 
                      "example": "https://api.otcbay.com/qr/sell/abc123"
                    },
                    "verification_url": {
                      "type": "string",
                      "description": "URL for transaction verification",
                      "example": "https://verify.otcbay.com/abc123"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time",
                      "description": "QR code creation timestamp"
                    },
                    "expires_at": {
                      "type": "string", 
                      "format": "date-time",
                      "description": "QR code expiration time (24 hours from creation)"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "‚ùå Bad Request - Invalid parameters"
          },
          "401": {
            "description": "üîí Unauthorized - Invalid API key"
          },
          "429": {
            "description": "‚è∞ Rate limit exceeded"
          }
        }
      }
    },
    "/qrcode/info/{verification_token}": {
      "get": {
        "tags": ["qrcode"],
        "summary": "Get QR Code Information", 
        "description": "Retrieve information about a QR code using its verification token\n\n### Public Endpoint\nThis endpoint does not require authentication and can be called by anyone with a valid verification token.",
        "operationId": "get_qr_info",
        "parameters": [
          {
            "name": "verification_token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "vt_abc123def456"
            },
            "description": "Verification token from QR code generation"
          }
        ],
        "responses": {
          "200": {
            "description": "‚úÖ QR code information retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "shop_id": {"type": "string"},
                    "shop_name": {"type": "string"},
                    "fee": {"type": "number", "description": "Transaction fee percentage"},
                    "status": {"type": "string", "enum": ["active", "expired", "used"]}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/market/market_price": {
      "get": {
        "tags": ["market"],
        "summary": "Get Market Prices",
        "description": "Get real-time cryptocurrency market prices from major exchanges\n\n### Data Sources\n- Bithumb (KRW pairs)\n- Upbit (KRW pairs) \n- Naver Finance (forex rates)\n\n### Update Frequency\nPrices are updated every 30 seconds\n\n### Public Endpoint\nNo authentication required",
        "operationId": "get_market_prices",
        "responses": {
          "200": {
            "description": "‚úÖ Market prices retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Price update timestamp"
                    },
                    "prices": {
                      "type": "object", 
                      "properties": {
                        "BTC": {
                          "type": "object",
                          "properties": {
                            "KRW": {"type": "number", "example": 42000000},
                            "USD": {"type": "number", "example": 32000}
                          }
                        },
                        "ETH": {
                          "type": "object",
                          "properties": {
                            "KRW": {"type": "number", "example": 2800000},
                            "USD": {"type": "number", "example": 2100}
                          }
                        },
                        "USDT": {
                          "type": "object", 
                          "properties": {
                            "KRW": {"type": "number", "example": 1320},
                            "USD": {"type": "number", "example": 1.00}
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/market/exchange_rate/{currency}": {
      "get": {
        "tags": ["market"],
        "summary": "Get Exchange Rate",
        "description": "Get current exchange rate for specific currency against USD\n\n### Supported Currencies\n- KRW (Korean Won)\n- JPY (Japanese Yen)\n- EUR (Euro)\n- CNY (Chinese Yuan)\n- KZT (Kazakhstani Tenge)",
        "operationId": "get_exchange_rate",
        "parameters": [
          {
            "name": "currency",
            "in": "path", 
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["KRW", "JPY", "EUR", "CNY", "KZT"],
              "example": "KRW"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "‚úÖ Exchange rate retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "currency": {"type": "string", "example": "KRW"},
                    "rate": {"type": "number", "example": 1320.50},
                    "timestamp": {"type": "string", "format": "date-time"}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/wallet/payment_request": {
      "post": {
        "tags": ["payment"],
        "summary": "Create Payment Request",
        "description": "Create a new payment request for cryptocurrency transactions\n\n### Process Flow\n1. Create payment request\n2. Customer receives wallet address and QR code\n3. Customer sends payment to provided address\n4. System confirms payment and notifies via callback\n\n### Callback Notifications\nWhen payment is received, we'll send a POST request to your callback_url with transaction details.",
        "operationId": "create_payment_request",
        "security": [{"APIKeyHeader": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["crypto", "external_id", "fiat", "amount", "callback_url"],
                "properties": {
                  "crypto": {
                    "type": "string",
                    "enum": ["BTC", "ETH", "USDT"],
                    "description": "Cryptocurrency to receive"
                  },
                  "external_id": {
                    "type": "string",
                    "description": "Your internal transaction ID",
                    "example": "order_12345"
                  },
                  "fiat": {
                    "type": "string", 
                    "enum": ["KRW", "USD", "EUR"],
                    "description": "Fiat currency for amount"
                  },
                  "amount": {
                    "type": "number",
                    "description": "Payment amount in fiat currency",
                    "example": 50000
                  },
                  "callback_url": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL to receive payment notifications",
                    "example": "https://yoursite.com/webhook/payment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "‚úÖ Payment request created successfully"
          }
        }
      }
    },
    "/transaction/by_shopid/{shopid}": {
      "get": {
        "tags": ["transaction"],
        "summary": "Get Shop Transactions",
        "description": "Retrieve transaction history for a specific shop\n\n### Pagination\nResults are paginated. Use `limit` and `offset` parameters to navigate through pages.\n\n### Date Filtering\nRequired date range helps optimize query performance.",
        "operationId": "get_shop_transactions",
        "security": [{"APIKeyHeader": []}],
        "parameters": [
          {
            "name": "shopid",
            "in": "path",
            "required": true,
            "schema": {"type": "string"},
            "example": "shop_123456"
          },
          {
            "name": "from_date",
            "in": "query", 
            "required": true,
            "schema": {"type": "string", "format": "date"},
            "example": "2025-01-01",
            "description": "Start date (YYYY-MM-DD)"
          },
          {
            "name": "to_date",
            "in": "query",
            "required": true, 
            "schema": {"type": "string", "format": "date"},
            "example": "2025-01-31",
            "description": "End date (YYYY-MM-DD)"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {"type": "integer", "default": 10, "maximum": 100},
            "description": "Number of transactions to return (max 100)"
          },
          {
            "name": "offset", 
            "in": "query",
            "schema": {"type": "integer", "default": 0},
            "description": "Number of transactions to skip"
          }
        ],
        "responses": {
          "200": {
            "description": "‚úÖ Transactions retrieved successfully"
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": ["system"],
        "summary": "Health Check",
        "description": "Check API system health and status\n\n### Public Endpoint\nNo authentication required. Use this to monitor API availability.",
        "operationId": "health_check",
        "responses": {
          "200": {
            "description": "‚úÖ System is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {"type": "string", "example": "healthy"},
                    "timestamp": {"type": "string", "format": "date-time"},
                    "version": {"type": "string", "example": "1.0.0"}
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization-Key",
        "description": "API key for authentication. Contact support to obtain your key."
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error message"
          },
          "code": {
            "type": "string", 
            "description": "Error code"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    }
  }
}
